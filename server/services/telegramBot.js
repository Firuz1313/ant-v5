const TelegramBot = require('node-telegram-bot-api')

class TelegramBotService {
    constructor() {
    this.token = process.env.TELEGRAM_BOT_TOKEN
    this.bot = null
    this.chatIds = new Set() // Store admin chat IDs
    this.userSessions = new Map() // Track user diagnostic sessions

    
    if (this.token) {
      this.initBot()
    } else {
      console.log('Telegram bot token not provided, bot features disabled')
    }
  }

  initBot() {
    try {
      this.bot = new TelegramBot(this.token, { polling: true })
      this.setupCommands()
      this.setupHandlers()
      console.log('Telegram bot initialized successfully')
    } catch (error) {
      console.error('Failed to initialize Telegram bot:', error)
    }
  }

  setupCommands() {
    if (!this.bot) return

    // Set bot commands
    this.bot.setMyCommands([
      { command: 'start', description: '–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º' },
      { command: 'help', description: '–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É' },
      { command: 'status', description: '–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏' },
      { command: 'stats', description: '–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è' },
      { command: 'users', description: '–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏' },
      { command: 'stuck', description: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, –∑–∞—Å—Ç—Ä—è–≤—à–∏–µ –Ω–∞ —à–∞–≥–∞—Ö' },
      { command: 'errors', description: '–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏ —Å–∏—Å—Ç–µ–º—ã' }
    ])
  }

  setupHandlers() {
    if (!this.bot) return

    // Start command
    this.bot.onText(/\/start/, (msg) => {
      const chatId = msg.chat.id
      this.chatIds.add(chatId)
      
      const welcomeMessage = `
ü§ñ *–ë–æ—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –¢–í-–ø—Ä–∏—Å—Ç–∞–≤–æ–∫*

–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å! –Ø –±—É–¥—É —É–≤–µ–¥–æ–º–ª—è—Ç—å –≤–∞—Å –æ —Å–æ–±—ã—Ç–∏—è—Ö –≤ —Å–∏—Å—Ç–µ–º–µ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏.

*–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
/help - –°–ø—Ä–∞–≤–∫–∞ –ø–æ –∫–æ–º–∞–Ω–¥–∞–º
/status - –°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
/users - –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
/stuck - –ü—Ä–æ–±–ª–µ–º–Ω—ã–µ —Å–µ—Å—Å–∏–∏
/errors - –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏

–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ:
‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è—Ö, –∑–∞—Å—Ç—Ä—è–≤—à–∏—Ö –Ω–∞ —à–∞–≥–∞—Ö
‚Ä¢ –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –¥–∏–∞–≥–Ω–æ—Å—ÇÔøΩÔøΩ–∫–∞—Ö
‚Ä¢ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–∫–∞—Ö
‚Ä¢ –ó–∞—è–≤–∫–∞—Ö –Ω–∞ –≤—ã–∑–æ–≤ –º–∞—Å—Ç–µ—Ä–∞
      `
      
      this.bot.sendMessage(chatId, welcomeMessage, { parse_mode: 'Markdown' })
    })

    // Help command
    this.bot.onText(/\/help/, (msg) => {
      const chatId = msg.chat.id
      const helpMessage = `
*üîß –ö–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏ –¢–í*

/status - –¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã
/stats - –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è
/users - –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
/stuck - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏
/errors - –ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ—à–∏–±–∫–∏ —Å–∏—Å—Ç–µ–º—ã

*üìä –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è:*
‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Å—Ç—Ä—è–ª –Ω–∞ —à–∞–≥–µ > 2 –º–∏–Ω—É—Ç
‚Ä¢ –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –Ω–µ—É–¥–∞—á–Ω–æ
‚Ä¢ –°–æ–∑–¥–∞–Ω–∞ –∑–∞—è–≤–∫–∞ –Ω–∞ –≤—ã–∑–æ–≤ –º–∞—Å—Ç–µ—Ä–∞
‚Ä¢ –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ —Å–∏—Å—Ç–µ–º—ã

*üí¨ –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:*
–û—Ç–ø—Ä–∞–≤—å—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é:
\`/send [session_id] [message]\`

–ó–∞–≤–µ—Ä—à–∏—Ç—å –ø—Ä–æ–±–ª–µ–º–Ω—É—é —Å–µ—Å—Å–∏—é:
\`/complete [session_id]\`
      `
      
      this.bot.sendMessage(chatId, helpMessage, { parse_mode: 'Markdown' })
    })

    // Status command
    this.bot.onText(/\/status/, async (msg) => {
      const chatId = msg.chat.id
      const status = await this.getSystemStatus()
      
      const statusMessage = `
üìä *–°—Ç–∞—Ç—É—Å —Å–∏—Å—Ç–µ–º—ã –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∏*

üü¢ –°–∏—Å—Ç–µ–º–∞: –†–∞–±–æ—Ç–∞–µ—Ç
üì± –ê–∫—Ç–∏–≤–Ω—ã—Ö —Å–µ—Å—Å–∏–π: ${status.activeSessions}
‚è±Ô∏è –°—Ä–µ–¥–Ω—è—è –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${status.averageDuration}
‚úÖ –£—Å–ø–µ—à–Ω—ã—Ö –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫: ${status.successRate}%
üîß –ó–∞—è–≤–æ–∫ –Ω–∞ –º–∞—Å—Ç–µ—Ä–∞: ${status.masterRequests}

*–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–±—ã—Ç–∏—è:*
${status.recentEvents.map(event => `‚Ä¢ ${event}`).join('\n')}
      `
      
      this.bot.sendMessage(chatId, statusMessage, { parse_mode: 'Markdown' })
    })

    // Stats command
    this.bot.onText(/\/stats/, async (msg) => {
      const chatId = msg.chat.id
      const stats = await this.getDailyStats()
      
      const statsMessage = `
üìà *–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è*

üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: ${stats.totalUsers}
üéØ –ù–∞—á–∞—Ç—ã—Ö –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫: ${stats.startedDiagnostics}
‚úÖ –ó–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ: ${stats.completedSuccessfully}
‚ùå –ù–µ–∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö: ${stats.abandoned}
üîß –ó–∞—è–≤–æ–∫ –Ω–∞ –º–∞—Å—Ç–µ—Ä–∞: ${stats.masterRequests}

*–ü–æ–ø—É–ª—è—Ä–Ω—ã–µ –ø—Ä–∏—Å—Ç–∞–≤–∫–∏:*
${stats.topDevices.map(device => `‚Ä¢ ${device.name}: ${device.count}`).join('\n')}

*–ß–∞—Å—Ç—ã–µ –æ—à–∏–±–∫–∏:*
${stats.topErrors.map(error => `‚Ä¢ ${error.title}: ${error.count}`).join('\n')}
      `
      
      this.bot.sendMessage(chatId, statsMessage, { parse_mode: 'Markdown' })
    })

    // Users command
    this.bot.onText(/\/users/, async (msg) => {
      const chatId = msg.chat.id
      const activeUsers = await this.getActiveUsers()
      
      let usersMessage = '*üë• –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏:*\n\n'
      
      if (activeUsers.length === 0) {
        usersMessage += '–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π'
      } else {
        activeUsers.forEach((user, index) => {
          usersMessage += `${index + 1}. –°–µ—Å—Å–∏—è ${user.sessionId}\n`
          usersMessage += `   üì± ${user.device} - ${user.error}\n`
          usersMessage += `   ‚è±Ô∏è –®–∞–≥ ${user.currentStep} (${user.timeOnStep})\n`
          usersMessage += `   üåê ${user.location || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'}\n\n`
        })
      }
      
      this.bot.sendMessage(chatId, usersMessage, { parse_mode: 'Markdown' })
    })

    // Stuck users command
    this.bot.onText(/\/stuck/, async (msg) => {
      const chatId = msg.chat.id
      const stuckUsers = await this.getStuckUsers()
      
      let stuckMessage = '*‚ö†Ô∏è –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏:*\n\n'
      
      if (stuckUsers.length === 0) {
        stuckMessage += '–ù–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –ø—Ä–æ–±–ª–µ–º–∞–º–∏'
      } else {
        stuckUsers.forEach((user, index) => {
          stuckMessage += `${index + 1}. –°–µ—Å—Å–∏—è ${user.sessionId}\n`
          stuckMessage += `   üö® –ó–∞—Å—Ç—Ä—è–ª –Ω–∞: "${user.stepTitle}"\n`
          stuckMessage += `   ‚è∞ –í—Ä–µ–º—è –Ω–∞ —à–∞–≥–µ: ${user.stuckTime}\n`
          stuckMessage += `   üì± ${user.device} - ${user.error}\n`
          stuckMessage += `   /help_${user.sessionId} - –ü–æ–º–æ—á—å\n\n`
        })
      }
      
      this.bot.sendMessage(chatId, stuckMessage, { parse_mode: 'Markdown' })
    })

    // Send instruction to user
    this.bot.onText(/\/send (\S+) (.+)/, async (msg, match) => {
      const chatId = msg.chat.id
      const sessionId = match[1]
      const message = match[2]
      
      const success = await this.sendInstructionToUser(sessionId, message)
      
      if (success) {
        this.bot.sendMessage(chatId, `‚úÖ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é —Å–µ—Å—Å–∏–∏ ${sessionId}`)
      } else {
        this.bot.sendMessage(chatId, `‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é. –°–µ—Å—Å–∏—è ${sessionId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.`)
      }
    })

    // Error handling
    this.bot.on('polling_error', (error) => {
      console.error('Telegram bot polling error:', error)
    })
  }

  // Notification methods
  async notifyUserStuck(sessionData) {
    if (!this.bot || this.chatIds.size === 0) return

    const message = `
üö® *–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Å—Ç—Ä—è–ª!*

üë§ –°–µ—Å—Å–∏—è: \`${sessionData.sessionId}\`
üì± –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: ${sessionData.device}
‚ùå –û—à–∏–±–∫–∞: ${sessionData.error}
üìç –®–∞–≥: "${sessionData.stepTitle}"
‚è∞ –í—Ä–µ–º—è –Ω–∞ —à–∞–≥–µ: ${sessionData.timeStuck}

/help_${sessionData.sessionId} - –ü–æ–º–æ—á—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
    `

    this.broadcastMessage(message)
  }

  async notifyDiagnosticCompleted(sessionData) {
    if (!this.bot || this.chatIds.size === 0) return

    const icon = sessionData.success ? '‚úÖ' : '‚ùå'
    const status = sessionData.success ? '–∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ' : '–∑–∞–≤–µ—Ä—à–µ–Ω–∞ –Ω–µ—É–¥–∞—á–Ω–æ'
    
    const message = `
${icon} *–î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ ${status}*

üë§ –°–µ—Å—Å–∏—è: \`${sessionData.sessionId}\`
üì± –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: ${sessionData.device}
‚ùå –û—à–∏–±–∫–∞: ${sessionData.error}
‚è±Ô∏è –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: ${sessionData.duration}
üìä –®–∞–≥–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ: ${sessionData.stepsCompleted}/${sessionData.totalSteps}
    `

    this.broadcastMessage(message)
  }

  async notifyMasterRequest(requestData) {
    if (!this.bot || this.chatIds.size === 0) return

    const priorityIcon = requestData.priority === 'high' ? 'üî¥' : requestData.priority === 'medium' ? 'üü°' : 'üü¢'
    
    const message = `
üîß *–ù–æ–≤–∞—è –∑–∞—è–≤–∫–∞ –Ω–∞ –º–∞—Å—Ç–µ—Ä–∞*

${priorityIcon} –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç: ${requestData.priority}
üìã ID –∑–∞—è–≤–∫–∏: \`${requestData.requestId}\`
üì± –£—Å—Ç—Ä–æ–π—Å—Ç–≤–æ: ${requestData.device}
‚ùå –ü—Ä–æ–±–ª–µ–º–∞: ${requestData.error}
‚è∞ –û–∂–∏–¥–∞–µ–º–æ–µ –≤—Ä–µ–º—è: ${requestData.estimatedArrival}
üìû –ö–æ–Ω—Ç–∞–∫—Ç: ${requestData.contact || '–ù–µ —É–∫–∞–∑–∞–Ω'}

/track_${requestData.requestId} - –û—Ç—Å–ª–µ–¥–∏—Ç—å –∑–∞—è–≤–∫—É
    `

    this.broadcastMessage(message)
  }

  async notifySystemError(errorData) {
    if (!this.bot || this.chatIds.size === 0) return

    const message = `
üí• *–°–∏—Å—Ç–µ–º–Ω–∞—è –æ—à–∏–±–∫–∞*

üö® –£—Ä–æ–≤–µ–Ω—å: ${errorData.level}
üìù –°–æ–æ–±—â–µ–Ω–∏–µ: ${errorData.message}
üìç –ö–æ–º–ø–æ–Ω–µ–Ω—Ç: ${errorData.component}
‚è∞ –í—Ä–µ–º—è: ${new Date(errorData.timestamp).toLocaleString('ru-RU')}

${errorData.stack ? `\`\`\`\n${errorData.stack.slice(0, 500)}\n\`\`\`` : ''}
    `

    this.broadcastMessage(message)
  }

  // Utility methods
  broadcastMessage(message) {
    this.chatIds.forEach(chatId => {
      this.bot.sendMessage(chatId, message, { parse_mode: 'Markdown' })
        .catch(error => {
          console.error(`Failed to send message to ${chatId}:`, error)
          // Remove invalid chat ID
          this.chatIds.delete(chatId)
        })
    })
  }

        async getSystemStatus() {
    // Return simple status data
    return {
      activeSessions: 0,
      averageDuration: '0 –º–∏–Ω',
      successRate: 0,
      masterRequests: 0,
      recentEvents: ['–°–∏—Å—Ç–µ–º–∞ –∑–∞–ø—É—â–µ–Ω–∞']
    }
  }

      async getDailyStats() {
    try {
      return await this.statsHelper.getDailyStats()
    } catch (error) {
      console.error('Failed to fetch daily stats:', error)
      return {
        totalUsers: 0,
        startedDiagnostics: 0,
        completedSuccessfully: 0,
        abandoned: 0,
        masterRequests: 0,
        topDevices: [],
        topErrors: []
      }
    }
  }

      async getActiveUsers() {
    try {
      return await this.statsHelper.getActiveUsers()
    } catch (error) {
      console.error('Failed to fetch active users:', error)
      return []
    }
  }

      async getStuckUsers() {
    try {
      return await this.statsHelper.getStuckUsers()
    } catch (error) {
      console.error('Failed to fetch stuck users:', error)
      return []
    }
  }

  async sendInstructionToUser(sessionId, message) {
    // In a real implementation, this would send a notification to the user's browser
    // For now, we'll just log it
    console.log(`Sending instruction to session ${sessionId}: ${message}`)
    return true
  }

  // Public API for the application
  static getInstance() {
    if (!this.instance) {
      this.instance = new TelegramBotService()
    }
    return this.instance
  }
}

module.exports = TelegramBotService
